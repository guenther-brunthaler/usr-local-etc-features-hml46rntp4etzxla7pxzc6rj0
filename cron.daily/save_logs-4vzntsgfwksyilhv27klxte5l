#! /bin/sh
# Cron job for saving a RAM-based syslog to persistent storage.
#
# Saves those parts of a ring-buffer in RAM containing syslog-entries to
# permanent storage which have not been written there yet. Obviously, this
# script must be executed more frequently than the ring buffer needs time to
# fill completely, or some entries will be lost.
#
# The commands which are used to read the current contents of the ring buffer
# can be specified via the "/etc/default"-mechanism. By default the command
# "logread" is used which dumps the ring buffer of busybox' syslogd
# implementation using the -C option.
#
# A different solution would be to use journald and instruct it to forward
# log-messages to the kernel message ring buffer. In this case, the
# "dmesg"-utility can be defined via /etc/default as the command for dumping
# the ring buffer.
#
# Note that the command for dumping the ring buffer will be passed to the
# shell, so it can actually be something more complex than a simple command,
# such as a whole pipeline of commands.
#
# The dump commands can also be used to reformat and filter the log. Whatever
# is returned by the dump commands will be considered the data to be made
# permanent. Just make sure the "transaction ID" log-messages created by this
# script do not get filtered out - they are needed for synchronization and
# ring-buffer overflow detection.
#
# Version 2021.92.1
#
# Copyright (c) 2018-2021 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

defaults_file=/etc/default/${0##*/}
# Settings which can be overriden by $defaults_file:
#
# Where to store the log saver's state.
state_file=/var/lib/misc/log_saver-4vzntsgfwksyilhv27klxte5l
# Commands for pretty-printing and optionally filtering the non-persistent
# log. Can be a single or multiple commands, including shell pipelines,
# command lists, and shell built-in commands. Whatever new data these commands
# return will be saved to persistent storage.
dump_commands='logread'
# The persistant storage file where the saves log entries shall be added to.
# This should normally be log-rotated by someone (such as "logrotate").
#
# Log-rotation frameworks should implement the rotation of $syslog by calling
# THIS script with the arguments "--exec-locked some_command ..." where
# "some_command ..." is the command which actually rotates the logs. The
# command will then be run protected by a lock, ensuring the cron job will not
# disturb it during its effort to rotate the logs.
syslog=/var/log/syslogprefix
# The properties for creating $syslog for output if it does not yet exist.
syslog_mode=640
syslog_owner=root
syslog_group=adm

test "$1" = "--debug" && shift || exec > /dev/null 2>& 1
set -e
cleanup() {
	rc=$?
	test "$TD" && rm -r -- "$TD"
	test $rc = 0 || logger -p user.err -t "$0" failure
}
TD=
trap cleanup 0

if test -f "$defaults_file"
then
	# Assign custom $dump_commands - or any of the other settings above.
	. "$defaults_file"
fi

dir=`dirname -- "$state_file"`
if test ! -d "$dir"
then
	mkdir -p -- "$dir"
fi

exec 5<> "$state_file"
flock 5

case $1 in
	--exec-locked)
		shift
		"$@" # Execute external command with file lock held.
		flock -u 5
		exit
esac

IFS= read -r omark <& 5 || omark=
TD=`mktemp -d -- "${TMPDIR:-/tmp}/${0##*/}".XXXXXXXXXX`
dump_log_internal() {
	(eval "$dump_commands") > "$TD"/dump
}
dump_log_internal
lno() {
	grep -Fn $2 -- "$1" "$TD"/dump | sed 's/^\([0-9]*\).*/\1/; q'
}
if test "$omark" && test "`lno "$omark" -x`" = `wc -l < "$TD"/dump`
then
	flock -u 5
	exit
fi

nmark=`
	dd if=/dev/urandom bs=1 count=12 2> /dev/null \
	| od -t x1 -A n | tr -dc '[:xdigit:]'
`
nmark="Saving system log to persistent storage (transaction ID $nmark)"
logger -p user.notice -t "$0" "$nmark"
dump_log_internal
nmark=`grep -F "$nmark" "$TD"/dump | head -n 1`

if test "$omark" && n=`lno "$omark"` && test "$n"
then
	tail -n +`expr $n + 1` < "$TD"/dump > "$TD"/tmp
	mv -- "$TD"/tmp "$TD"/dump
else
	logger -p user.warning -t "$0" \
		"Some log entries before this one have not been saved!"
fi
if test "$nmark" && n=`lno "$nmark"` && test "$n"
then
	if test $n = 1
	then
		> "$TD"/dump
	else
		head -n `expr $n - 1` < "$TD"/dump > "$TD"/tmp
		mv -- "$TD"/tmp "$TD"/dump
	fi
else
	logger -p user.crit -t "$0" "Logs are being flooded!"
fi

if test ! -e "$syslog"
then
	> "$syslog"
	chmod "$syslog_mode" -- "$syslog"
	chown "$syslog_owner" -- "$syslog"
	chgrp "$syslog_group" -- "$syslog" || {
		chgrp 0 -- "$syslog" # Fallback.
		logger -p user.crit -t "$0" "Cannot set group for '$syslog'!"
	}
fi
cat "$TD"/dump >> "$syslog"
printf '%s\n' "$nmark" > "$state_file"
flock -u 5
