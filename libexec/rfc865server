#! /bin/sh
# "Quote of the Day" server ("qotd"). Implements RFC 865.
#
# Returns a text message less than 512 characters. Listens on port 17 TCP+UDP.
#
# The message consists of 3 x 3 passwords. They represent the current and two
# preceding passwords from three groups of passwords, generated at different
# intervals which, all followup-entries taken together, approximately cover a
# temporal range of an hour, day and week.
#
# The idea is that a client which needs to reboot can use one of those keys
# to temporarily encrypt local data from a secure RAM disk and decrypt it
# using the same key after the reboot. The key should be combined with a
# key stored on the unencrypted disk.
#
# This server never saves the keys to persistent storage. (Assuming
# $XDG_RUNTIME_DIR, $TMPDIR and "/tmp" are not located on persistent storage
# either. The script tries those directories in this order to save its
# randomly generated pseudo-random seed. $XDG_RUNTIME_DIR will only be used if
# it is defined and writable. $TMPDIR will only be used if it is defined.)
#
# Version 2023.105
#
# Copyright (c) 2022-2023 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

app_id=kg8g7r86u02lzg2gl4ijpi4pp
helper=/etc/libexec/cached/keygen-octets-by-harvesting-entropy
ossl=openssl

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

exec 2>& 1 # Let the client see any errors. Should not happen anyway.

now=
while getopts d:D opt
do
	case $opt in
		d) now=$OPTARG;;
		D) set -xv;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

test -x "$helper"
command -v "$ossl" > /dev/null
if test -z "$HOME"
then
	HOME=`grep "^\`id -un\`:" /etc/passwd`
	o=$IFS; IFS=:; set -- $HOME; IFS=$o
	HOME=$6; export HOME
fi
test -d "$HOME"
mkdir -p "${XDG_DATA_HOME:="$HOME/.local/share"}"

cfg=$XDG_DATA_HOME/misc
test ! -d "$cfg" && mkdir -- "$cfg"

app=${0##*/}
cfg=$cfg/$app-$app_id

owners() {
	ls -dn -- "$1" | cut -d ' ' -f 3-4
}

process() {
	if test ! -w "$cfg"
	then
		test $write = true || return
		> "$cfg"
	fi
	us=`owners "$cfg"`
	if
		IFS= read -r seedpath < "$cfg" \
		&& test -r "$seedpath" \
		&& test -w "$seedpath" \
		&& test -s "$seedpath" \
		&& them=`owners "$seedpath"` \
		&& test "$us" = "$them"
	then
		:
	else
		test $write = true || return
		if test -z "$XDG_RUNTIME_DIR" || test ! -w "$XDG_RUNTIME_DIR"
		then
			XDG_RUNTIME_DIR=${TMPDIR:-/tmp}
			export XDG_RUNTIME_DIR
		fi
		seedpath=`mktemp -- "${XDG_RUNTIME_DIR}/$app".XXXXXXXXXX`
		test "$seedpath" || exit # BUG: Why is this "exit" necessary?
		"$helper" 32 > "$seedpath"
		printf '%s\n' "$seedpath" > "$cfg"
	fi
	# $seedpath seems to be a valid (and volatile) master key file.
	if test -z "$now"
	then
		now=`date +%s`
	fi
	expr x"$now" : x'[1-9][0-9]*$' >& 8 # Ensure "date" has %s extension.
	emit 5m `expr 5 \* 60`
	echo
	emit 8h `expr 8 \* 60 \* 60`
	echo
	emit 2d `expr 2 \* 24 \* 60 \* 60`
}

emit() {
	ctr=`expr $now / $2`
	for p in current last penultimate
	do
		printf "$p $1: "
		{ echo $ctr && cat < "$seedpath"; } \
			| "$ossl" sha256 -binary \
			| "$ossl" base64 \
			| tr -d = | tr / %
		ctr=`expr $ctr - 1`
	done
}

while :
do
	if	test -e "$cfg" && test -r "$cfg"
	then
		exec 9< "$cfg" 2>& 8
		flock -s 9
		write=false process && break
		exec 9<& -
	fi
	if test ! -e "$cfg" || test -w "$cfg"
	then
		exec 9>> "$cfg" 2>& 8
		flock 9
		write=true process && break
		exec 9>& -
	fi
	sleep 1
done 8> /dev/null
