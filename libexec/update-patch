#! /bin/sh
# This script will be called by patched scripts as
#
# $ exec /etc/libexec/update-patch "$0" "$ofile" "$@"
#
# where
#
# $ofile: Name of the unmodified original version of $0.
#
# THIS script shall do the following:
#
# * Canonicalize path names of $0 and $ofile before further processing.
# * Copy file $ofile to $0.
# * Apply patch $PATCHES_BASE/$0.patch (see below).
# * Write result of "stat -c %i+%Z $ofile" to $UPDATE_KEYS/$0 (see below).
# * Re-exec "$0" "$@".

# Keep the following values in sync with ./update-patch-helper!
HYPE_NAME=diversion-patches
UUID=5cj2dtd975yp5yah4ku3ll4ia
PATCHES_REL_BASE=../$HYPE_NAME.d
UPDATE_KEYS=/var/lib/$HYPE_NAME-$UUID

set -e
trap 'test $? = 0 || echo "$0 failed!" >& 2' 0

PATCHES_BASE=`dirname -- "$0"`/$PATCHES_REL_BASE

# Sets $path to absolute canonicalized path name for command $1.
mk_absx() {
	local paths p
	path=$1
	case $path in
		/*) ;;
		*/*) false || exit;;
		*)
			# Locate $path in a directory from $PATH.
			paths=$PATH:
			while :
			do
				p=${paths%%:*}
				paths=${paths#*:}
				case $p in
					/*)
						p=${p%%/}/$path
						if
							test -f "$p" \
							&& test -x "$p"
						then
							path=$p
							break
						fi
				esac
				test -n "$paths" # Otherwise: Not found.
			done
	esac
	test -e "$path"
	path=`readlink -f -- "$path"`
	test -f "$path"; test -x "$path"
}

orig_name=$1; mk_absx "$orig_name"; ufile=$path
mk_absx "$2"; ofile=$path
shift 2

patch=$PATCHES_BASE/$ufile.patch
test -f "$patch"
cp -p -- "$ofile" "$ufile"
patch -i "$patch" -- "$ufile" > /dev/null 2>& 1 || {
	echo "Could not patch '$ufile' based on '$ofile'"
	echo "by applying patch '$patch'!"
	echo "Please apply the patch manually. Then regenerate the patch."
	false || exit
} >& 2

ukeyloc=$UPDATE_KEYS/$ufile
ukeydir=`dirname -- "$ukeyloc"`
test -d "$ukeydir" || mkdir -p -- "$ukeydir"
stat -c %i+%Z -- "$ofile" > "$ukeyloc"

exec "$orig_name" "$@"
