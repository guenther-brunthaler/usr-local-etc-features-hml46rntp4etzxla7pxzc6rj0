#! /bin/sh
# Non-recursively process all properly named list files and file drop tree
# directories in $list_dir.
#
# List files (one entry per line) specify either absolute pathnames or just
# basenames of executables. Empty lines and shell-like comments will be
# ignored in the list files. The script will then locate those files and copy
# them to suitable locations within the initramfs. If an entry is prefixed
# with "? ", then it will not be an error if that executable cannot be found.
# If an entry is prefixed with "= ", then it will be put exactly at the
# corresponding location in the initramfs, bypassing automatic target
# directory mapping. If an entry is prefixed with "M ", then it must be a
# kernel driver name, and its associated kernel module (unless already built
# into the kernel) as well as all its dependency modules will be included
# within initramfs. (Prefix characters "=" or "M" may be combined with "?" in
# arbitrary order.)
#
# Every file drop tree directory contains a directory tree of related files
# which shall be placed into the initramfs filesystem root directory, using
# the same relative structure as within the file drop directory tree.
#
# List file names names must not contain a "." or they will be ignored
# completely. The same is true for file drop tree directory names, except that
# a single ".d"-suffix is allowed and also required.
#
# The idea is that all hooks which need additional files in the initramfs
# where the exact path is not known or might change later put file lists or
# directories with actual files in $list_dir, and *this* hook ensures the
# files will get copied to initramfs properly.
#
# Version 2022.8
#
# Copyright (c) 2018-2022 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

list_dir=$CONFDIR/hooks/utilities-k5487f9fqve065q5y0wfhfue3.d
more_search_paths=/usr/local/sbin:/usr/sbin:/sbin

set -e
case $1 in
	prereqs) echo; exit
esac

. /usr/share/initramfs-tools/hook-functions
. /etc/initramfs-tools/hooks/helpers.d/scopes-hqxbfzp9026esereelim9tbyk.sh

if test -f ~/.profile
then
	set +e; . ~/.profile > /dev/null 2>& 1 < /dev/null; set -e
fi
PATH=$PATH:$more_search_paths

test "$DESTDIR"
test "$list_dir"

# Put file $1 into directory with absolute path $2 (which will be interpreted
# relative to $DESTDIR, though). If $1 happens to be an executeble, any
# pre-existing executables (such as Busybox replacements) of the same name
# will be removed first.
destputfile() {
	scope
		var ddir
		ddir=${DESTDIR%%/}
		mkdir -p -- "$ddir$2"
		case `file --mime-type -- "$1"` in
			*text/*) ;;
			*-executable | *-sharedlib)
				var bn bpth
				bn=${1##*/}
				for bpth in /bin /sbin /usr/bin /usr/sbin
				do
					bpth=$ddir$bpth/$bn
					test ! -e "$bpth" && continue
					rm -- "$bpth"
				done
				copy_exec "$1" "$2"
				unwind; return
		esac
		cp -p -- "$1" "$ddir$2"
	unwind
}

# Recursively copy existing directory tree $1 to absolute path $2 (which will
# be interpreted relative to $DESTDIR, though). $3 must also already exist.
copy_directory() {
	scope
	var fso rp o
	for fso in $1/* $1/.*
	do
		rp=${fso#"$1/"}
		case $rp in
			. | ..) continue
		esac
		if
			test -L "$fso" || {
				test -e "$fso" \
				&& test ! -f "$fso" && test ! -d "$fso"
			}
		then
			scp -P -- "$rp" "${DESTDIR%%/}${2##/}"/
		elif test -d "$fso"
		then
			o=${DESTDIR%%/}${2%%/}/$rp
			if test ! -d "$o"
			then
				mkdir -p -- "$o"
				chmod --reference="$fso" -- "$o"
				chown --reference="$fso" -- "$o"
			fi
			copy_directory "$fso" "${2%%/}/$rp"
		elif test -f "$fso"
		then
			destputfile "$fso" "$2"
		fi
	done
	unwind
}

need() {
	echo "Required executable \"$1\" not found!" >& 2
	false || exit
}

mam() {
	case $optional in
		'') manual_add_modules "$1";;
		*) manual_add_modules "$1" > /dev/null 2>& 1 || :
	esac
}

process_utility_item() {
	scope
	var optional exact module f
	optional= exact= module=
	while :
	do
		case $utility in
			"#"* | "") return;;
			"? "*) utility=${utility#"? "}; optional=Y;;
			"= "*) utility=${utility#"= "}; exact=Y;;
			"M "*) utility=${utility#"M "}; module=Y;;
			/*)
				test -e "$utility" && break
				test "$optional" && { unwind; return; }
				need "$utility"
				;;
			*)
				case $module in
					'') ;;
					*) mam "$utility"; { unwind; return; }
				esac
				f=$utility
				utility=`command -v -- "$f" 2> /dev/null` \
					&& break
				test "$optional" && { unwind; return; }
				need "$f"
		esac
	done
	f=${utility%%/} f=/${f##/}
	test -f "$f" || {
		echo "E: Cannot find required utility '$utility'!" >& 2
		false || exit
	}
	var d
	d=$f
	if test "$exact"
	then
		d=${d%/*}
	else
		var k o
		case $d in
			/usr/local/*/*) d=/usr/${d#/usr/local/}; k=4;;
			/usr/*/*) k=4;;
			/bin/* | /sbin/*) k=3;;
			*) d=/usr/; k=3
		esac
		# Keep only the first (k - 1) path prefixes of
		# $d.
		o=
		while k=`expr $k - 1`
		do
			r=${d#*/}
			o=$o${d%"$r"}
			d=$r
		done
		d=$o
	fi
	destputfile "$f" "$d"
	unwind
}

list_dir=${list_dir%%/}; list_dir=/${list_dir##/}
find "$list_dir" \
	-path "$list_dir/*/*" -prune -o \( \
		-type f ! -name "*.*" \
		-o -type d ! -path "$list_dir" -name "*.d" \
	\) -print \
| {
	scope
		var util_entry utility o
		while IFS= read -r util_entry
		do
			if test -f "$util_entry"
			then
				while read -r utility
				do
					process_utility_item
				done < "$util_entry"
			else
				o=${util_entry##*/}
				case ${o%.d} in
					*.*) continue
				esac
				copy_directory "$util_entry" /
			fi
		done
	unwind
}
