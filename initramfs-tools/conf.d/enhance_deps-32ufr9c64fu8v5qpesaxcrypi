#! /bin/false
# v2023.130
# Copyright (c) 2018-2023 Guenther Brunthaler. All rights reserved.
# 
# This shell snippet is free software.
# Distribution is permitted under the terms of the GPLv3.

# Create a more powerful version of get_prereq_pairs() which is used by the
# initramfs framework to interpret the tokens returned by the "prereq" action
# of hook and boot scripts.
#
# Extend the syntax of supported "prereqs" tokens printed by some script as
# follows:
#
# somename - run the script AFTER any dependency group "somename"
# <somename - run the script BEFORE any dependency group "somename"
# @somename - make the script an part of the dependency group "somename"
# !somename - run within depgroup "somename" AFTER any script "somename"
# <!somename - run within depgroup "somename" BEFORE any script "somename"
#
# For every script, a dependency group of the same name will be created
# automatically, initially containing this script as its only member. This
# means that dependencies will work exactly the same as in the original
# dependency resolution algorithm as long as none of the new punctuation
# character prefixes shown above are used.
#
# By declaring "@"-dependencies, other scripts can join any existing
# dependency group as well. This means that dependencies on the group will
# automatically extend to all of its members. This mechanism can be used to
# create drop-in replacements for pre-existing scripts. For instance, if a new
# script "openssh" shall replace a previous script "dropbear" on which other
# scripts might already depend, the new script just needs to declare a
# dependency "@dropbear". This will make "openssh" a member of the "dropbear"
# dependency group, even if the script "dropbear" no longer exists. But
# because dependencies target groups rather than individual scripts, "openssh"
# will now be the target of all dependencies on "dropbear".
#
# "@"-dependencies can also be used to extend or split the functionality of a
# script, because those scripts will be run shortly after of before the script
# after which the group is named. This happens because all members of the same
# dependency group represent a single unit of dependency ordering in relation
# to dependency declarations by scripts from outside that group.
#
# While "@"-groups are created automatically for every existing script, they
# will also be generated automatically by "@"-statements even without an
# existing script of the same name. This allows to create synthetic dependency
# groups which are not automatically related to any script. This mechanism
# could be used to create "well known" groups like "networking", "logger" etc.
# in a similar way as the "$"-prefixed names in the classic sysv dependency
# declarations.
#
# Dependency groups can also be nested. For instance, scripts within the same
# dependency groups can declare dependencies on other members of the group,
# which are then nested dependency groups.
#
# One exception from the latter mechanism are dependencies within a dependency
# group which refer to the script after which the group is named. In this case
# it is necessary to use the "!"- or "<!"-prefixes in order to refer to the
# script with the group's name rather than to the enclosing group itself.
# Declaring either prefix also implies a "@" declaration. Therefore a
# declaration "!somename" has the same effect as "@somename !somename".
#
# Note: Be sure to properly quote "<" in the script, or it will be
# mis-interpreted by the shell as a redirection operator. Some shells may use
# "!" as a history-expansion character, so it might be prudent to quote it as
# well.

# POSIX does not state whether already-defined functions may be redefined.
unset -f get_prereq_pairs

# Important: Keep this in sync with any changes in the function of the same
# name in /usr/share/initramfs-tools/hook-functions!
#
# The function below should be the same code as there, except for the contents
# of the "for"-loop where the innermost "echo" has been wrapped within a new
# "if"/"elif" and has then been moved into its "else" branch.

get_prereq_pairs()
{
	set_initlist
	for gp_x in ${initlist:-}; do
		echo "^${gp_x} ${gp_x}"
		echo "${gp_x} ${gp_x}\$"
		gp_src="$(get_source $gp_x)"
		prereqs=$("${gp_src}" prereqs)
		for prereq in ${prereqs}; do
			if test "${prereq#@}" != "${prereq}"
			then
				echo "^${prereq#@} ${gp_x}"
				echo "${gp_x} ${prereq#@}\$"
			elif test "${prereq#<!}" != "${prereq}"
			then
				echo "^${prereq#<!} ${gp_x}"
				echo "${gp_x} ${prereq#<!}\$"
				echo "${gp_x} ${prereq#<!}"
			elif test "${prereq#!}" != "${prereq}"
			then
				echo "^${prereq#!} ${gp_x}"
				echo "${gp_x} ${prereq#!}\$"
				echo "${prereq#!} ${gp_x}"
			elif test "${prereq#<}" != "${prereq}"
			then
				echo "${gp_x} ^${prereq#<}"
			else
				echo "${prereq}\$ ${gp_x}"
			fi
		done
	done
}
